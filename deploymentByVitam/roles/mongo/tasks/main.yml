---

- name: "Install {{ mongodb.package_name }} package"
  package:
    name: "{{ mongodb.package_name }}"
    state: latest
  register: result
  retries: "{{ packages_install_retries_number }}"
  until: result is succeeded
  delay: "{{ packages_install_retries_delay }}"
  notify:
    - restart mongod

- name: "enable {{ service_name }} service at boot"
  service:
    name: "{{ service_name }}"
    enabled: true
  notify:
    - restart mongod

#### Configuration ####

- name: Check that the directories exists (must be removed when the RPM plugin will be patched)
  file:
    path: "{{ vitamui_defaults.folder.root_path }}/{{ item }}/mongod"
    state: directory
    owner: "{{ vitamui_defaults.users.vitamuidb }}"
    group: "{{ vitamui_defaults.users.group }}"
    mode: "{{ vitamui_defaults.folder.folder_permission }}"
  with_items:
    - app
    - bin
    - conf
    - data
    - lib
    - log
    - script
    - tmp
  notify:
    - restart mongod
  tags:
    - update_mongodb_configuration

- name: Create db directory
  file:
    path: "{{ mongo_db_path }}"
    state: directory
    owner: "{{ vitamui_defaults.users.vitamuidb }}"
    group: "{{ vitamui_defaults.users.group }}"
    mode: "{{ vitamui_defaults.folder.folder_permission }}"
  notify:
    - restart mongod
  tags:
    - update_mongodb_configuration

- name: Create the mongod configuration server file
  template:
    src: "mongod.conf.j2"
    dest: "{{ mongo_config_path }}/mongod.conf"
    owner: "{{ vitamui_defaults.users.vitamuidb }}"
    group: "{{ vitamui_defaults.users.group }}"
    mode: "{{ vitamui_defaults.folder.conf_permission }}"
  notify:
    - restart mongod
  tags:
    - update_mongodb_configuration

#### Consul configuration ####

- name: Ensure consul config dir is OK
  file:
    path: "{{ consul.conf_folder }}"
    owner: "{{ vitamui_defaults.users.vitamui }}"
    group: "{{ vitamui_defaults.users.group }}"
    mode: "{{ vitamui_defaults.folder.folder_permission }}"
    state: directory
  tags:
    - update_mongodb_configuration

- name: Deploy consul agent service declaration
  template:
    src: "service-componentid.json.j2"
    dest: "{{ consul.conf_folder }}/service-mongod.json"
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitamui_defaults.users.group }}"
    mode: "{{ vitamui_defaults.folder.conf_permission }}"
  tags:
    - consul_conf
    - update_mongodb_configuration
  notify:
   - reload consul configuration


# Ensure that the installation is complete and consul up before contnuing...
- meta: flush_handlers
  tags:
    - update_mongodb_configuration

- name: Ensure service is started
  service:
    name: vitamui-mongod
    state: started
  tags:
    - update_mongodb_configuration

#### Mongo online configuration ####
# Note : mongodb needs to be started for these elements to succeed

# Enable mongo passphrase

- name: Copy the passphrase
  template:
    src: "keyfile.j2"
    dest: "{{ mongo_config_path }}/keyfile"
    owner: "{{ vitamui_defaults.users.vitamuidb }}"
    group: "{{ vitamui_defaults.users.group }}"
    mode: 0600
  tags:
    - update_mongodb_configuration

# # Now let's initiate the replica set
# # Do this only on the first node of the current shard
# # We have to wait for all the node to be up

- block:

    - name: Wait for the service port to be open on all members of the replica
      wait_for:
        host: "{{ hostvars[item]['ip_service'] }}"
        port: "{{ mongodb.mongod_port }}"
        timeout: "{{ vitamui_defaults.services.start_timeout }}"
      with_items:
        - "{{ groups['hosts_vitamui_mongod'] }}"
      tags:
        - update_mongodb_configuration

    - name: Copy the script which initiate the replica set
      template:
        src: "init-replica.js.j2"
        dest: "{{ vitamui_defaults.folder.root_path }}/app/mongod/init-replica.js"
        owner: "{{ vitamui_defaults.users.vitamuidb }}"
        group: "{{ vitamui_defaults.users.group }}"
        mode: "{{ vitamui_defaults.folder.conf_permission }}"
      tags:
        - update_mongodb_configuration

    # - name: Copy script that restore configuration of mongod sharded cluster
    #   template:
    #     src: "restore-mongod.js.j2"
    #     dest: "{{ vitamui_defaults.folder.root_path }}/app/mongod/restore-mongod.js"
    #     owner: "{{ vitamui_defaults.users.vitamuidb }}"
    #     group: "{{ vitamui_defaults.users.group }}"
    #     mode: "{{ vitamui_defaults.folder.conf_permission }}"
    #   tags:
    #     - update_mongodb_configuration

    - name: Initiate the replica set
      command: mongo --host {{ ip_service }} --port {{ mongodb.mongod_port }} {{ vitamui_defaults.folder.root_path }}/app/mongod/init-replica.js
      tags:
        - update_mongodb_configuration


    - import_tasks: check_auth.yml

    # Create the local shard admin user
    - name: Copy the script which create the local users
      template:
        src: "local-user.js.j2"
        dest: "{{ vitamui_defaults.folder.root_path }}/app/mongod/local-user.js"
        owner: "{{ vitamui_defaults.users.vitamuidb }}"
        group: "{{ vitamui_defaults.users.group }}"
        mode: "{{ vitamui_defaults.folder.conf_permission }}"
      tags:
        - update_mongodb_configuration

    - name: Create the local shard user
      # command: "mongo --host shard{{ mongo_shard_id }}/{{ ip_service}}:{{ mongodb.mongod_port }} {{ vitamui_defaults.folder.root_path }}/app/mongod/local-user.js"
      command: "mongo --host {{ ip_service}}:{{ mongodb.mongod_port }} {{ mongo_credentials }} {{ vitamui_defaults.folder.root_path }}/app/mongod/local-user.js"
      tags:
        - update_mongodb_configuration

  when: mongo_rs_bootstrap is defined and mongo_rs_bootstrap|lower == "true"
