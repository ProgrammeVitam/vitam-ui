filter
{

    # --------------------------------------------------
    # Basic text transforms
    # --------------------------------------------------

    mutate {
        # logback send 011 code for \t and 012 for \n
        gsub => [ "message", "#011", "\t"   ]
        gsub => [ "message", "#012", "\n"   ]
        gsub => [ "message", "\t"  , ' '    ]
        gsub => [ "message", "\n"  , '    ' ]
    }

    # --------------------------------------------------
    # Special transforms for syslog & file inputs
    # --------------------------------------------------

    # Todo move this at the end (to find vitam-* for real vitam components)
    if [input] == "syslog" {
        mutate {
            rename => { "logsource" => "hostname" }
        }
        grok {
            break_on_match => false
            keep_empty_captures => true
            # If program name starts with 'vitam-', keep only the suffix
            match => [ "program", "(?:(vitam[-._])?)(?<vitam_component>[^.]*)" ]
            overwrite => [ "vitam_component" ]
        }
    }

    else if [input] == "logstash" {
        mutate {
            add_field => { "vitam_component" => "logstash" }
        }
    }

    # --------------------------------------------------
    # Let's parse the message depending on the program sending it
    # --------------------------------------------------

    if [vitam_component] =~ "logstash" {
        json {
            source => "message"
        }

        if [level]     { mutate { rename => { "level"     => "log_level"          } } }
        if [message]   { mutate { rename => { "message"   => "log_message"        } } }
        if [error]     { mutate { rename => { "error"     => "logstash_error"     } } }
        if [backtrace] { mutate { rename => { "backtrace" => "logstash_backtrace" } } }
        if [file]      { mutate { rename => { "file"      => "logstash_file"      } } }
        if [line]      { mutate { rename => { "line"      => "logstash_line"      } } }
        if [method]    { mutate { rename => { "method"    => "logstash_method"    } } }
        if [host]      { mutate { rename => { "host"      => "hostname"           } } }

        date {
            match => [ "timestamp" , "ISO8601" ]
            target => [ "@timestamp" ]
        }

        mutate {
            add_field => { "logger" => "logstash" }
        }
    }

    # Now we should have only the vitam components
    # todo: change this by else if (vitam-*) and else {generic processing}
    # todo change module name to thread name (everywhere)
    else {
        grok {
            break_on_match => false
            keep_empty_captures => true
            match => [
                "message",
                "%{TIMESTAMP_ISO8601:timestamp}%{SPACE}\[\[(?<java_thread>.*)\]\]%{SPACE}\[(?<request_id>.*)?\]%{SPACE}%{LOGLEVEL:log_level}%{SPACE}(?:%{GREEDYDATA:msg_data})"
            ]
            match => [
                "msg_data",
                "(?<java_class>%{JAVACLASS})%{SPACE}-%{SPACE}Caller[^%{SPACE}]+%{SPACE}at[%{SPACE}\n]+(?<java_caller>[^\s]*)%{SPACE}:%{SPACE}(?:%{JAVALOGMESSAGE:log_message})"
            ]
            overwrite => [ "timestamp" ]
        }
        mutate { add_field => { "logger" => "logback" } }
        date {
            match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss,SSS" ]
            target => [ "@timestamp" ]
        }
    }

    # --------------------------------------------------
    # If we don t have any grokparsefailure on the message, remove the unused fields
    # --------------------------------------------------

    # todo rescope some remove_fileds (ex: msg_data, space (should be removed), ...)
    if "_grokparsefailure" not in [tags] {
        mutate {
            remove_field => [
                "syslog_timestamp", "syslog_message",
                "syslog_program",
                "space", "date_msg", "mois", "jour", "hr", "mn", "sec",
                "severity", "facility", "facility_label", "severity_label", "priority",
                "request",
                "request_info",
                "path",
                "path_file",
                "path_log",
                "message",
                "msg_data",
                "input",
                "@version",
                "timestamp",
                "program"
            ]
        }
    }

}
