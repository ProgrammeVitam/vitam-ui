---

- name: "Install static ressources for {{ vitamui_struct.vitamui_component }}"
  package:
    name: "{{ vitamui_struct.package_name | default(package_name) }}"
    state: latest
  register: package_installed
  retries: "{{ packages_install_retries_number }}"
  until: package_installed is succeeded
  delay: "{{ packages_install_retries_delay }}"
  tags: update_package_vitamui
  notify: reload nginx

- name: Install static ressources for ui-identity-admin - Copy folder
  copy:
    src: "{{ frontend_data_dir }}/identity/"
    dest: "{{ frontend_data_dir }}/identity-admin"
    group: "{{ frontend_group }}"
    owner: "{{ frontend_user }}"
    remote_src: yes
  when: vitamui_struct.vitamui_component == "ui-identity-admin"

- name: Get package facts
  package_facts:
  register: package_facts_result
  no_log: "{{ hide_passwords_during_deploy }}"

- name: Get application version from package
  set_fact:
    frontend_application_version: "{{ package_facts_result.ansible_facts.packages[ vitamui_struct.package_name | default(package_name) ][0].version }}"

- name: Configure upsteam for API GW
  template:
    src: frontend/upstream_gw.j2
    dest: "{{ nginx_conf_dir }}/upstream_gw"
    group: "{{ frontend_group }}"
    owner: "{{ frontend_user }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  notify: reload nginx

- name: Add config.json file
  template:
    src: frontend/config.json.j2
    dest: "{{ frontend_data_dir }}/{{ vitamui_struct.vitamui_component | regex_replace('^ui-', '') }}/assets/config.json"
    group: "{{ frontend_group }}"
    owner: "{{ frontend_user }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  notify: reload nginx

- name: "Configure vhost for {{ vitamui_struct.vitamui_component }}"
  template:
    src: frontend/vhost.conf.j2
    dest: "{{ nginx_conf_dir }}/{{ vitamui_struct.vitamui_component }}.conf"
    group: "{{ frontend_group }}"
    owner: "{{ frontend_user }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  notify: reload nginx

- name: "Add UI certificates for {{ vitamui_struct.vitamui_component }}"
  copy:
    src: "{{ item }}"
    dest: "{{ nginx_ssl_dir }}"
    group: "{{ frontend_group }}"
    owner: "{{ frontend_user }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  with_fileglob:
    - "{{ inventory_dir }}/certs/server/hosts/{{ inventory_hostname }}/{{ vitamui_struct.vitamui_component }}.crt"
    - "{{ inventory_dir }}/certs/server/hosts/{{ inventory_hostname }}/{{ vitamui_struct.vitamui_component }}.key"
  notify: reload nginx

- name: Put ssl configuration when secure is enabled
  template:
    src: ssl-ui.conf.j2
    dest: "{{ nginx_ssl_dir }}/{{ vitamui_struct.vitamui_component }}-ssl.conf"
    group: "{{ frontend_group }}"
    owner: "{{ frontend_user }}"
    mode: "{{ vitamui_defaults.folder.conf_permission }}"
  when: vitamui_struct.secure | default(true) | bool
  notify: reload nginx

- block:

# TODO: Will not work in production, we don't have a local vault_cert_pass_file...
  - name: Decrypt vault-certs
    command: "ansible-vault decrypt {{ vault_cert_file }} --vault-password-file {{ vault_cert_pass_file }}"

  - name: Read certificate key from vault file
    include_vars:
      file: "{{ vault_cert_file }}"
      name: ui_keys
    no_log: "{{ hide_passwords_during_deploy }}"

  - name: Encrypt back vault-certs
    command: "ansible-vault encrypt {{ vault_cert_file }} --vault-password-file {{ vault_cert_pass_file }}"

  delegate_to: localhost

- name: "Selected key for {{ vitamui_struct.vitamui_component }}"
  set_fact:
    selected_key: "{{ ui_keys['server_' + vitamui_struct.vitamui_component | regex_replace('-', '_') + '_key'] }}"
  no_log: "{{ hide_passwords_during_deploy }}"

- name: "Add keypass for {{ vitamui_struct.vitamui_component }}"
  template:
    src: certificate.key_pass.j2
    dest: "{{ nginx_ssl_dir }}/{{ vitamui_struct.vitamui_component }}.key_pass"
    group: "{{ frontend_group }}"
    owner: "{{ frontend_user }}"
    mode: "{{ vitamui_defaults.folder.conf_permission }}"
  notify: reload nginx

- name: Ensure nginx is started
  systemd:
    name: nginx
    state: started
