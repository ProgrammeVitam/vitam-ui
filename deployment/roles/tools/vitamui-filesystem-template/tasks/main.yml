---
- name: "[{{ fstemplate_task_banner }}] Ensure fstemplate workspace_dir exists"
  file:
    path: "{{ fstemplate_workspace_dir_prefix }}"
    state: directory
  become: false
  delegate_to: localhost
  tags:
    - fstemplate

- name: "[{{ fstemplate_task_banner }}] Create output directory for computing templates"
  tempfile:
    prefix: "{{ fstemplate_workspace_dir_prefix }}/"
    state: directory
  become: false
  delegate_to: localhost
  register: tmp_tmpl_dir
  tags:
    - fstemplate

- name: "[{{ fstemplate_task_banner }}] Init workspace tmp dir (result of local fstemplating)"
  set_fact:
    workspace_tmp_dir: "{{ '' | normpath(tmp_tmpl_dir.path) }}"
  tags:
    - fstemplate

# --------
# Stat local config directories
- name: "[{{ fstemplate_task_banner }}] List conf templates"
  shell: 'find . -type f -name "*.j2" | grep {{ fstemplate_filter_pattern }}'
  args:
    chdir: "{{ fstemplate_src_dir }}"
  become: false
  delegate_to: localhost
  failed_when: false
  run_once: true
  register: config_templates
  tags:
    - fstemplate

- name: "[{{ fstemplate_task_banner }}] List conf static files"
  shell: 'find . -type f ! -name "*.j2"  | grep {{ fstemplate_filter_pattern }}'
  args:
    chdir: "{{ fstemplate_src_dir }}"
  become: false
  delegate_to: localhost
  run_once: true
  failed_when: false
  register: config_files
  tags:
    - fstemplate

# ----
# Pre generate config locally
- name: "[{{ fstemplate_task_banner }}] Creating config directories"
  file:
    path: "{{ '' | normpath(workspace_tmp_dir, item | dirname)}}"
    state: directory
    recurse: yes
  become: false
  delegate_to: localhost
  with_items:
     - "{{ config_files.stdout_lines }}"
     - "{{ config_templates.stdout_lines }}"
  tags:
    - fstemplate


- name: "[{{ fstemplate_task_banner }}] Computing config templates"
  template:
    src: "{{ fstemplate_src_dir }}/{{ template }}"
    dest: "{{'' | normpath(workspace_tmp_dir, template|dirname, template|basename|regex_replace('.j2$','')) }}"
  with_items: "{{ config_templates.stdout_lines }}"
  loop_control:
    loop_var: template
  become: false
  delegate_to: localhost
  notify:
    - services handlers
  tags:
    - fstemplate


- name: "[{{ fstemplate_task_banner }}] Importing config static files"
  copy:
    src: "{{ fstemplate_src_dir }}/{{file}}"
    dest: "{{ '' | normpath(workspace_tmp_dir, file|dirname, file|basename) }}"
  become: false
  delegate_to: localhost
  with_items: "{{ config_files.stdout_lines }}"
  loop_control:
    loop_var: file
  notify:
    - services handlers
  tags:
    - fstemplate

# ----
# Processing locally computed config

# Backup in tmp result dir if local dump
- name: "[{{ fstemplate_task_banner }}] Backup all tmp config in dump_result dir"
  shell: "mkdir -p {{ '' | normpath(fstemplate_dump_local_dir,'HOST_' + inventory_hostname) }}/  && cp -R  {{ workspace_tmp_dir }}/* {{ '' | normpath(fstemplate_dump_local_dir,'HOST_' + inventory_hostname) }}/ || echo 'copy failed'"
  become: false
  delegate_to: localhost
  when: vitamui_template_debug is defined and vitamui_template_debug|bool
  tags:
    - fstemplate

# Send all result
- name: "[{{ fstemplate_task_banner }}] copy mode|push config"
  copy:
    src: "{{ workspace_tmp_dir }}/"
    dest: "{{ fstemplate_dest_dir_prefix }}"
    owner: "{{ fstemplate_user_owner }}"
    group: "{{ fstemplate_group_owner  }}"
    mode: "{{ fstemplate_dest_file_mode }}"
    directory_mode: "{{ fstemplate_dest_dir_mode }}"
  when: fstemplate_push_mode == 'copy'


#
# # TODO: enable if needed. Disabled for task speed
#
#- block:
#  - name: "[{{ fstemplate_task_banner }}] archive mode|Create config archive"
#    archive:
#      path: "{{ workspace_tmp_dir }}/"
#      dest: "{{ workspace_tmp_dir }}/{{ workspace_tmp_dir | basename }}.tar.gz"
#      mode: "{{ fstemplate_dest_file_mode }}"
#      #format: zip
#    become: false
#    delegate_to: localhost
#
#  # NOTE: Broken since ansible 2.5
##  - name: "[{{ fstemplate_task_banner }}] archive mode|Push and unarchive config"
##    unarchive:
##      src: "{{ workspace_tmp_dir }}/{{ workspace_tmp_dir | basename }}.tgz"
##      dest: "{{ fstemplate_dest_dir_prefix | default ('/') }}"
##      owner: "{{ fstemplate_user_owner }}"
##      group: "{{ fstemplate_group_owner  }}"
##      #mode: "{{ fstemplate_dest_file_mode }}"
##      extra_opts: ["--strip-components=1"]
##     # No fstemplate tags to disable pushing file when dump_config.sh scripts execs
#
#  - name: "[{{ fstemplate_task_banner }}] archive mode|push archive"
#    copy:
#      src: "{{ workspace_tmp_dir }}/{{ workspace_tmp_dir | basename }}.tar.gz"
#      dest: "/tmp"
#
#  - name: "[{{ fstemplate_task_banner }}] archive mode|extract archive"
#    command: "tar --strip-components=1 -xzf /tmp/{{ workspace_tmp_dir | basename }}.tar.gz"
#
#
#  when: fstemplate_push_mode == 'archive'

- name: "[{{ fstemplate_task_banner }}] Clean locally created files"
  shell: "rm -Rf  {{ '' | normpath(workspace_tmp_dir) }}"
  become: false
  delegate_to: localhost
  tags:
    - fstemplate
