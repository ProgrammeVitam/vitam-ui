{% if gateway.enabled | default(False) is sameas true %}

db = db.getSiblingDB("cas");

print("START 004_TRV-400_enable_oidc_code_grant_type_on_identity_service_ref.js");

db.services.deleteOne({ "_id": NumberInt(2) });

db.services.insertOne({
  _id: NumberInt(2),
  _class: "org.apereo.cas.services.OidcRegisteredService",
  clientId: "{{ vitamui.identity.clientId | default('identity') }}",
  serviceId: "{{ vitamui.identity.serviceId | default('^' + vitamui.identity.base_url | default(url_prefix+'/identity') + '/.*') }}",
  name: "{{ vitamui.identity.name | default('Identity Access Management Application') }}",
  bypassApprovalPrompt: true,
  supportedGrantTypes: ["authorization_code"],
  supportedResponseTypes: ["code", "token"],
  attributeReleasePolicy: {
    _class: "org.apereo.cas.services.ReturnAllowedAttributeReleasePolicy",
    allowedAttributes: ["authtoken"],
  },
  jsonFormat: true,
});

db.services.deleteOne({ "_id": NumberInt(3) });

db.services.insertOne({
  _id: NumberInt(3),
  _class: "org.apereo.cas.services.OidcRegisteredService",
  clientId: "{{ vitamui.identity_admin.clientId | default('identity-admin') }}",
  serviceId: "{{ vitamui.identity_admin.serviceId | default('^' + vitamui.identity_admin.base_url | default(url_prefix+'/identity_admin') + '/.*') }}",
  name: "{{ vitamui.identity_admin.name | default('Identity Admin Access Management Application') }}",
  bypassApprovalPrompt: true,
  supportedGrantTypes: ["authorization_code"],
  supportedResponseTypes: ["code", "token"],
  attributeReleasePolicy: {
    _class: "org.apereo.cas.services.ReturnAllowedAttributeReleasePolicy",
    allowedAttributes: ["authtoken"],
  },
  jsonFormat: true,
});

print("END 004_TRV-400_enable_oidc_code_grant_type_on_identity_service_ref.js");

{% endif %}
